// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id         Int         @id @default(autoincrement())
  phone      String?     @unique
  email      String?     @unique
  name       String
  avatar     String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  tokens     Token[]
  fav        Fav[]
  product    Product[]
  posts      Post[]
  answers    Answer[]
  wonderings Wondering[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int // Product의 userId 필드에 저장되는 숫자가 User의 id라는 것을 의미한다. 
  image       String
  name        String
  price       Int
  favsCount   Int // 이 상품의 좋아요 갯수 :: 누군가 상품을 관심목록에 추가하면 + 1 되어야 한다. 
  description String   @db.MediumText // String은 varchar로 191자로 제한이 있다, 더 많은 텍스트를 넣고자 할 때 제한을 설정할 수 있다
  favs        Fav[]
}

// user에 의해서 생성되고, product를 가리킨다.
model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 동네생활
model Post {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade) // 이 post는 user를 가리킨다. === user는 여러개의 post를 가질 수 있다.
  userId     Int
  question   String      @db.MediumText // text의 길이 제한 
  answers    Answer[]
  wonderings Wondering[]
}

// 동네생활
// DB의 관계 :::  Answer를 만드는 것은 user이지만, 가지고 있는 것은 Post 다.
model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText
}

// 동네생활 ::: 궁금해요 버튼
model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}
